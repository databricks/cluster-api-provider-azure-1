/*
Copyright 2021 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package v1alpha4

import (
	"fmt"
	"github.com/Azure/go-autorest/autorest/to"
	apiconversion "k8s.io/apimachinery/pkg/conversion"
	expv1beta1 "sigs.k8s.io/cluster-api-provider-azure/exp/api/v1beta1"
	utilconversion "sigs.k8s.io/cluster-api/util/conversion"
	"sigs.k8s.io/controller-runtime/pkg/conversion"
	"strings"
)

// ConvertTo converts this AzureManagedMachinePool to the Hub version (v1beta1).
func (src *AzureManagedMachinePool) ConvertTo(dstRaw conversion.Hub) error {
	dst := dstRaw.(*expv1beta1.AzureManagedMachinePool)
	if err := Convert_v1alpha4_AzureManagedMachinePool_To_v1beta1_AzureManagedMachinePool(src, dst, nil); err != nil {
		return err
	}

	// Convert NodeTaints to Taints
	if len(src.Spec.NodeTaints) > 0 {
		dst.Spec.Taints = make([]expv1beta1.Taint, len(src.Spec.NodeTaints))
		for i, taint := range src.Spec.NodeTaints {
			dst.Spec.Taints[i] = expv1beta1.Taint{
				Key:    taint[0:strings.Index(taint, "=")],
				Value:  taint[strings.Index(taint, "=")+1 : strings.Index(taint, ":")],
				Effect: expv1beta1.TaintEffect(taint[strings.Index(taint, ":")+1:]),
			}
		}
	}
	// Convert NodeLabels
	if len(src.Spec.NodeLabels) > 0 {
		dst.Spec.NodeLabels = make(map[string]string)
		for k, v := range src.Spec.NodeLabels {
			dst.Spec.NodeLabels[k] = *v
		}
	}
	// Convert Scaling
	if src.Spec.EnableAutoScaling != nil && *src.Spec.EnableAutoScaling {
		dst.Spec.Scaling = &expv1beta1.ManagedMachinePoolScaling{
			MinSize: src.Spec.MinCount,
			MaxSize: src.Spec.MaxCount,
		}
	}
	// Manually restore data.
	restored := &expv1beta1.AzureManagedMachinePool{}
	if ok, err := utilconversion.UnmarshalData(src, restored); err != nil || !ok {
		return err
	}

	dst.Spec.Name = restored.Spec.Name
	dst.Spec.AvailabilityZones = restored.Spec.AvailabilityZones
	dst.Spec.MaxPods = restored.Spec.MaxPods
	dst.Spec.OsDiskType = restored.Spec.OsDiskType
	dst.Spec.EnableUltraSSD = restored.Spec.EnableUltraSSD

	dst.Status.LongRunningOperationStates = restored.Status.LongRunningOperationStates
	dst.Status.Conditions = restored.Status.Conditions

	return nil
}

// ConvertFrom converts from the Hub version (v1beta1) to this version.
func (dst *AzureManagedMachinePool) ConvertFrom(srcRaw conversion.Hub) error {
	src := srcRaw.(*expv1beta1.AzureManagedMachinePool)
	if err := Convert_v1beta1_AzureManagedMachinePool_To_v1alpha4_AzureManagedMachinePool(src, dst, nil); err != nil {
		return err
	}

	// Convert Taints to NodeTaints
	if len(src.Spec.Taints) > 0 {
		dst.Spec.NodeTaints = make([]string, len(src.Spec.Taints))
		for i, taint := range src.Spec.Taints {
			dst.Spec.NodeTaints[i] = fmt.Sprintf("%s=%s:%s", taint.Key, taint.Value, taint.Effect)
		}
	}
	// Convert NodeLabels
	if len(src.Spec.NodeLabels) > 0 {
		dst.Spec.NodeLabels = make(map[string]*string)
		for k, v := range src.Spec.NodeLabels {
			labelCopy := v
			dst.Spec.NodeLabels[k] = &labelCopy
		}
	}
	// Convert Scaling
	if src.Spec.Scaling != nil {
		dst.Spec.EnableAutoScaling = to.BoolPtr(true)
		dst.Spec.MinCount = src.Spec.Scaling.MinSize
		dst.Spec.MaxCount = src.Spec.Scaling.MaxSize
	}
	// Preserve Hub data on down-conversion.
	return utilconversion.MarshalData(src, dst)
}

// Convert_v1beta1_AzureManagedMachinePoolSpec_To_v1alpha4_AzureManagedMachinePoolSpec is an autogenerated conversion function.
func Convert_v1beta1_AzureManagedMachinePoolSpec_To_v1alpha4_AzureManagedMachinePoolSpec(in *expv1beta1.AzureManagedMachinePoolSpec, out *AzureManagedMachinePoolSpec, s apiconversion.Scope) error {
	return autoConvert_v1beta1_AzureManagedMachinePoolSpec_To_v1alpha4_AzureManagedMachinePoolSpec(in, out, s)
}

// Convert_v1beta1_AzureManagedMachinePoolStatus_To_v1alpha4_AzureManagedMachinePoolStatus is an autogenerated conversion function.
func Convert_v1beta1_AzureManagedMachinePoolStatus_To_v1alpha4_AzureManagedMachinePoolStatus(in *expv1beta1.AzureManagedMachinePoolStatus, out *AzureManagedMachinePoolStatus, s apiconversion.Scope) error {
	return autoConvert_v1beta1_AzureManagedMachinePoolStatus_To_v1alpha4_AzureManagedMachinePoolStatus(in, out, s)
}

// Convert_v1alpha4_AzureManagedMachinePoolSpec_To_v1beta1_AzureManagedMachinePoolSpec is an autogenerated conversion function.
func Convert_v1alpha4_AzureManagedMachinePoolSpec_To_v1beta1_AzureManagedMachinePoolSpec(in *AzureManagedMachinePoolSpec, out *expv1beta1.AzureManagedMachinePoolSpec, s apiconversion.Scope) error {
	return autoConvert_v1alpha4_AzureManagedMachinePoolSpec_To_v1beta1_AzureManagedMachinePoolSpec(in, out, s)
}

// ConvertTo converts this AzureManagedMachinePoolList to the Hub version (v1beta1).
func (src *AzureManagedMachinePoolList) ConvertTo(dstRaw conversion.Hub) error {
	dst := dstRaw.(*expv1beta1.AzureManagedMachinePoolList)
	return Convert_v1alpha4_AzureManagedMachinePoolList_To_v1beta1_AzureManagedMachinePoolList(src, dst, nil)
}

// ConvertFrom converts from the Hub version (v1beta1) to this version.
func (dst *AzureManagedMachinePoolList) ConvertFrom(srcRaw conversion.Hub) error {
	src := srcRaw.(*expv1beta1.AzureManagedMachinePoolList)
	return Convert_v1beta1_AzureManagedMachinePoolList_To_v1alpha4_AzureManagedMachinePoolList(src, dst, nil)
}
